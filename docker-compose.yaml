services:
  wallet-api:
    image: docker.io/waltid/wallet-api:${VERSION_TAG:-latest}
    profiles:
      - identity
      - all
    pull_policy: always
    build:
      context: ./waltid-identity-0.11.0
      dockerfile: waltid-services/waltid-wallet-api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      caddy:
        condition: service_started
    env_file:
      - ./waltid-identity-0.11.0/docker-compose/.env
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "wase:host-gateway"
    volumes:
      - ./waltid-identity-0.11.0/docker-compose/wallet-api/config:/waltid-wallet-api/config
      - ./waltid-identity-0.11.0/docker-compose/wallet-api/walt.yaml:/waltid-wallet-api/walt.yaml
      - ./waltid-identity-0.11.0/docker-compose/wallet-api/data:/waltid-wallet-api/data

  issuer-api:
    platform: linux/x86_64
    image: docker.io/waltid/issuer-api:${VERSION_TAG:-latest}
    profiles:
      - identity
      - all
    pull_policy: always
    build:
      context: ./waltid-identity-0.11.0
      dockerfile: waltid-services/waltid-issuer-api/Dockerfile
    depends_on:
      - caddy
    env_file:
      - ./waltid-identity-0.11.0/docker-compose/.env
    volumes:
      - ./waltid-identity-0.11.0/docker-compose/issuer-api/config:/waltid-issuer-api/config

  verifier-api:
    platform: linux/x86_64
    image: docker.io/waltid/verifier-api:${VERSION_TAG:-latest}
    profiles:
      - identity
      - all
    pull_policy: always
    build:
      context: ./waltid-identity-0.11.0
      dockerfile: waltid-services/waltid-verifier-api/Dockerfile
    depends_on:
      - caddy
    env_file:
      - ./waltid-identity-0.11.0/docker-compose/.env
    volumes:
      - ./waltid-identity-0.11.0/docker-compose/verifier-api/config:/waltid-verifier-api/config

  #waltid-demo-wallet:
   # image: docker.io/waltid/waltid-demo-wallet:${VERSION_TAG:-latest}
   # profiles:
    #  - identity
    #  - all
    #pull_policy: always
    #build:
    #  context: ../
    #  dockerfile: waltid-applications/waltid-web-wallet/apps/waltid-demo-wallet/Dockerfile
    #depends_on:
    #  - wallet-api
    #  - caddy
    #environment:
    #  NUXT_PUBLIC_ISSUER_CALLBACK_URL: "http://localhost:$DEMO_WALLET_FRONTEND_PORT"
    #  NUXT_PUBLIC_DEV_WALLET_URL: "http://localhost:$DEV_WALLET_FRONTEND_PORT"
    #  PORT: $DEMO_WALLET_FRONTEND_PORT

  waltid-dev-wallet:
    image: docker.io/waltid/waltid-dev-wallet:${VERSION_TAG:-latest}
    profiles:
      - identity
      - all
    pull_policy: always
    build:
      context: ./waltid-identity-0.11.0
      dockerfile: waltid-applications/waltid-web-wallet/apps/waltid-dev-wallet/Dockerfile
    depends_on:
      - wallet-api
      - caddy
    environment:
      NUXT_PUBLIC_ISSUER_CALLBACK_URL: "http://localhost:$DEV_WALLET_FRONTEND_PORT"
      NUXT_PUBLIC_DEMO_WALLET_URL: "http://localhost:$DEMO_WALLET_FRONTEND_PORT"
      PORT: $DEV_WALLET_FRONTEND_PORT

  web-portal:
    platform: linux/x86_64
    image: docker.io/waltid/portal:${VERSION_TAG:-latest}
    profiles:
      - identity
      - all
    pull_policy: always
    build:
      context: ./waltid-identity-0.11.0
      dockerfile: waltid-applications/waltid-web-portal/Dockerfile
    depends_on:
      - caddy
    environment:
      NEXT_PUBLIC_VC_REPO: "http://host.docker.internal:$VC_REPO_PORT"
      NEXT_PUBLIC_ISSUER: "http://host.docker.internal:$ISSUER_API_PORT"
      NEXT_PUBLIC_VERIFIER: "http://host.docker.internal:$VERIFIER_API_PORT"
      NEXT_PUBLIC_WALLET: "http://host.docker.internal:$DEMO_WALLET_FRONTEND_PORT"
      PORT: $WEB_PORTAL_PORT

  vc-repo:
    platform: linux/x86_64
    image: docker.io/waltid/vc-repository:latest
    profiles:
      - identity
      - all
    pull_policy: always
    depends_on:
      - caddy
    environment:
      PORT: $VC_REPO_PORT

  postgres:
    image: postgres
    profiles:
      - identity
      - all
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "$DB_USERNAME" ]
      interval: 5s
      timeout: 1s
      retries: 5
    restart: always
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - wallet-api-db:/waltid-wallet-api/data
      - keycloak-db:/var/lib/postgresql/data
    ports:
      - $POSTGRES_DB_PORT:5432 #TODO: tcp/udp proxy with caddy
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres/$DB_NAME
      - KC_DB_USERNAME=${DB_USERNAME}
      - KC_DB_PASSWORD=${DB_PASSWORD}
      - KC_HOSTNAME=localhost
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"

  vault:
    image: hashicorp/vault:latest
    profiles:
      - tse
      - all
    container_name: vault
    healthcheck:
      test: ["CMD-SHELL", "vault status || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
    volumes:
      - ./vault/config.hcl:/vault/config/config.hcl
      - vault_data:/vault/file
    ports:
      - "$VAULT_PORT:8200"
    environment:
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:$VAULT_PORT"
      VAULT_ADDR: "http://127.0.0.1:$VAULT_PORT"
    command: server -config=/vault/config/config.hcl -dev -dev-root-token-id="dev-only-token"
    restart: always

  vault-init:
    image: hashicorp/vault:latest
    profiles:
      - tse
      - all
    container_name: vault-init
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "dev-only-token"
      VAULT_ADDR: "http://vault:$VAULT_PORT"
    depends_on:
      vault:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "/vault/scripts/init.sh"]
    volumes:
      - ./vault/init.sh:/vault/scripts/init.sh
  mongo-server:
    image: mongo:latest
    container_name: mongo-server
    restart: always
    ports:
      - "$MONGO_PORT:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - mongodb_network
  mongo-client:
    image: mongo-express:latest
    restart: always
    depends_on:
      - mongo-server
    ports:
      - "9000:9000"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo-server
      ME_CONFIG_MONGODB_PORT: 27017
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
    ports:
      - "$MYSQL_PORT:3306"
    volumes:
      - mysql_data:/var/lib/mysql
  
  # Mis servicios
  api-gateway:
    build: ./BackEnd/Api-Gateway
    ports:
      - "5000:5000"
    depends_on:
      - mysql
      - mongo-server

  ebsifake:
    build: ./BackEnd/EbsiFake
    ports:
      - "2000:2000"
    depends_on:
      - api-gateway

  mongodb-api:
    build: ./BackEnd/MongoDB
    ports:
      - "4000:4000"
    env_file:
      - ./BackEnd/MongoDB/.env
    depends_on:
      - mongo-server

  sql-api:
    build: ./BackEnd/SQL
    ports:
      - "8000:8000"
    env_file:
      - ./BackEnd/SQL/.env
    depends_on:
      - mysql

  verifierissuer-api:
    build: ./BackEnd/VerifierIssuerAPI
    ports:
      - "3000:3000"

  frontend:
    build: ./FrontEnd
    ports:
      - "5173:5173"
    depends_on:
      - api-gateway


  caddy:
    image: docker.io/caddy:2
    restart: unless-stopped
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
    ports:

      - target: "$WALLET_BACKEND_PORT"
        published: $WALLET_BACKEND_PORT # wallet-api
        protocol: tcp
        mode: host

      - target: "$ISSUER_API_PORT"
        published: $ISSUER_API_PORT # issuer-api
        protocol: tcp
        mode: host

      - target: "$VERIFIER_API_PORT"
        published: $VERIFIER_API_PORT # verifier-api
        protocol: tcp
        mode: host

      - target: "$DEMO_WALLET_FRONTEND_PORT"
        published: $DEMO_WALLET_FRONTEND_PORT # waltid-demo-wallet
        protocol: tcp
        mode: host

      - target: "$DEV_WALLET_FRONTEND_PORT"
        published: $DEV_WALLET_FRONTEND_PORT # waltid-dev-wallet
        protocol: tcp
        mode: host

      - target: "$WEB_PORTAL_PORT"
        published: $WEB_PORTAL_PORT # web-portal
        protocol: tcp
        mode: host

      - target: "$VC_REPO_PORT"
        published: $VC_REPO_PORT # vc-repo
        protocol: tcp
        mode: host

      - target: "$PG_ADMIN_PORT"
        published: $PG_ADMIN_PORT # pg-admin
        protocol: tcp
        mode: host

    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
volumes:
  wallet-api-db:
  vault_data:
  keycloak-db:
  mongo_data:
  mysql_data:

networks:
  mongodb_network:

